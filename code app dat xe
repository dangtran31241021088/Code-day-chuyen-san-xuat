import osmnx as ox
import networkx as nx
import folium
import skfuzzy as fuzz
import numpy as np
import ipywidgets as widgets
from IPython.display import display

# -----------------------------
# 1. T·∫£i b·∫£n ƒë·ªì Qu·∫≠n 1, TP.HCM
# -----------------------------
place = "District 1, Ho Chi Minh City, Vietnam"
G = ox.graph_from_place(place, network_type="drive")

# -----------------------------
# 2. Danh s√°ch ƒë·ªãa ƒëi·ªÉm c·ª• th·ªÉ
# -----------------------------
places = {
    "Nh√† th·ªù ƒê·ª©c B√†": (10.7797838, 106.6990184),
    "B∆∞u ƒëi·ªán Trung t√¢m": (10.780138, 106.699470),
    "Ch·ª£ B·∫øn Th√†nh": (10.772114, 106.698056),
    "Ph·ªë ƒëi b·ªô Nguy·ªÖn Hu·ªá": (10.772942, 106.704880),
    "Dinh ƒê·ªôc L·∫≠p": (10.777182, 106.695533),
    "Bitexco Tower": (10.771900, 106.704044),
    "B·∫£o t√†ng M·ªπ thu·∫≠t": (10.769940, 106.697220),
    "C·∫£ng Nh√† R·ªìng": (10.762522, 106.709350),
    "C√¥ng vi√™n 30/4": (10.776385, 106.698883),
    "Nh√† h√°t Th√†nh ph·ªë": (10.776889, 106.703280),
    "Kh√°ch s·∫°n Rex": (10.776290, 106.702610),
    "Ch·ª£ D√¢n Sinh": (10.764420, 106.702960),
    "Tr∆∞·ªùng ƒêH Kinh t·∫ø TP.HCM": (10.773220, 106.698100),
    "T√≤a √°n Nh√¢n d√¢n TP.HCM": (10.776010, 106.695930),
    "B·∫£o t√†ng Th√†nh ph·ªë": (10.772870, 106.697380),
    "C√¥ng vi√™n Tao ƒê√†n": (10.774070, 106.692420),
    "B·ªánh vi·ªán Nhi ƒê·ªìng 2": (10.784060, 106.699650),
    "Kh√°ch s·∫°n Caravelle": (10.776770, 106.703980),
    "Tr∆∞·ªùng L√™ Qu√Ω ƒê√¥n": (10.774770, 106.692910),
    "H·ªì Con R√πa": (10.779660, 106.698540)
}

# -----------------------------
# 3. Widget giao di·ªán
# -----------------------------
start_dropdown = widgets.Dropdown(options=list(places.keys()), description="Start:")
end_dropdown = widgets.Dropdown(options=list(places.keys()), description="End:")

vehicle_dropdown = widgets.Dropdown(options=["Xe m√°y", "Xe h∆°i"], description="Ph∆∞∆°ng ti·ªán:")
weather_dropdown = widgets.Dropdown(options=["N·∫Øng", "M∆∞a"], description="Th·ªùi ti·∫øt:")
time_dropdown = widgets.Dropdown(options=["B√¨nh th∆∞·ªùng", "Cao ƒëi·ªÉm"], description="Khung gi·ªù:")

button_run = widgets.Button(description="T√¨m ƒë∆∞·ªùng ƒëi")
output = widgets.Output()

# -----------------------------
# 4. H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t
# -----------------------------
def run_route(b):
    with output:
        output.clear_output()

        start_name = start_dropdown.value
        end_name = end_dropdown.value

        if start_name == end_name:
            print("ƒêi·ªÉm B·∫Øt ƒë·∫ßu v√† K·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c tr√πng nhau. Vui l√≤ng ch·ªçn l·∫°i.")
            return

        vehicle = vehicle_dropdown.value
        weather = weather_dropdown.value
        time = time_dropdown.value

        start_point = places[start_name]
        end_point = places[end_name]

        # t√¨m node g·∫ßn nh·∫•t v·ªõi ƒë·ªãa ƒëi·ªÉm
        start_node = ox.distance.nearest_nodes(G, start_point[1], start_point[0])
        end_node = ox.distance.nearest_nodes(G, end_point[1], end_point[0])
# t√¨m ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t
        route = nx.shortest_path(G, start_node, end_node, weight="length")
        route_length = nx.shortest_path_length(G, start_node, end_node, weight="length") / 1000  # km

        # b·∫£n ƒë·ªì
        m = folium.Map(location=start_point, zoom_start=15)
        folium.Marker(start_point, tooltip=f"Start: {start_name}", icon=folium.Icon(color="green")).add_to(m)
        folium.Marker(end_point, tooltip=f"End: {end_name}", icon=folium.Icon(color="red")).add_to(m)

        route_coords = [(G.nodes[node]["y"], G.nodes[node]["x"]) for node in route]
        folium.PolyLine(route_coords, color="blue", weight=5).add_to(m)

        print(f"üìç T·ª´ {start_name} ƒë·∫øn {end_name}")
        print(f"üìè Kho·∫£ng c√°ch: {route_length:.2f} km")

        # -----------------------------
        # 5. T√≠nh gi√° b·∫±ng Fuzzy Logic
        # -----------------------------
        distance = np.arange(0, 21, 1)
        price = np.arange(0, 201, 1)

        dist_low = fuzz.trimf(distance, [0, 0, 5])
        dist_med = fuzz.trimf(distance, [3, 10, 15])
        dist_high = fuzz.trimf(distance, [10, 20, 20])

        price_low = fuzz.trimf(price, [0, 0, 50])
        price_med = fuzz.trimf(price, [30, 100, 150])
        price_high = fuzz.trimf(price, [100, 200, 200])

        d_low = fuzz.interp_membership(distance, dist_low, route_length)
        d_med = fuzz.interp_membership(distance, dist_med, route_length)
        d_high = fuzz.interp_membership(distance, dist_high, route_length)

        rule_low = d_low
        rule_med = d_med
        rule_high = d_high

        price_activation_low = np.fmin(rule_low, price_low)
        price_activation_med = np.fmin(rule_med, price_med)
        price_activation_high = np.fmin(rule_high, price_high)

        aggregated = np.fmax(price_activation_low,
                        np.fmax(price_activation_med, price_activation_high))

        base_price = fuzz.defuzz(price, aggregated, 'centroid')

        # -----------------------------
        # 6. ƒêi·ªÅu ch·ªânh theo ph∆∞∆°ng ti·ªán, th·ªùi ti·∫øt & khung gi·ªù
        # -----------------------------
        if vehicle == "Xe h∆°i":
            base_price *= 1.5
        if weather == "M∆∞a":
            base_price *= 1.2
        if time == "Cao ƒëi·ªÉm":
            base_price *= 1.3

        print(f"üöñ Ph∆∞∆°ng ti·ªán: {vehicle}")
        print(f"üå¶Ô∏è Th·ªùi ti·∫øt: {weather}")
        print(f"‚è∞ Khung gi·ªù: {time}")
        print(f"üí∞ Gi√° chuy·∫øn ƒëi (∆∞·ªõc t√≠nh): {base_price:.0f} ngh√¨n VNƒê")

        display(m)

# -----------------------------
# 7. Hi·ªÉn th·ªã giao di·ªán
# -----------------------------
button_run.on_click(run_route)
display(start_dropdown, end_dropdown, vehicle_dropdown, weather_dropdown, time_dropdown, button_run, output)
